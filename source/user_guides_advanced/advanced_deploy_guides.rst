.. _model_deploy_advanced_en:

====================================
Advanced Guide to Model Deployment
====================================

--------------------
Overview
--------------------

This section will provide code examples for running the ``axmodel`` model compiled and generated by ``Pulsar2``. All sample codes are provided by the ``ax-samples`` project.
``ax-samples`` is a project led by AXera. Its purpose is to provide the industry's mainstream open source algorithm model running sample code to facilitate developers to quickly evaluate and adapt AXera's chips.

~~~~~~~~~~~~~~~~~~~~
Method of obtaining
~~~~~~~~~~~~~~~~~~~~

- :download:`click download <https://github.com/AXERA-TECH/pulsar2-docs/releases/download/v1.9/ax-samples.zip>`

~~~~~~~~~~~~~~~~~~~~~~~~~~~
Introduction of ax-samples 
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Currently ``ax-samples`` has been verified but is not limited to the following open source models:

- Classification model

     - MobileNetv1
     - MobileNetv2
     - Others

- Detection model

     - YOLOv5s
  
Verified hardware platform

- AX650
- M76H
- AX620E

``ax-samples`` directory description

.. code-block:: bash

    $ tree -L 3
    .
    ├── 3rdparty      # ax-samples compile dependent third-party libraries  
    │   ├── ax620e
    │   │   ├── engine
    │   │   ├── interpreter
    │   │   └── libsys
    │   ├── ax650
    │   │   ├── ax-engine
    │   │   ├── interpreter
    │   │   └── libsys
    │   ├── libopencv-4.5.5-aarch64         # aarch64 version of OpenCV, used to open test images and draw execution results
    │   │   ├── bin
    │   │   ├── include
    │   │   ├── lib
    │   │   └── share
    │   ├── libprotobuf-3.19.4-aarch644      # axmodel parsing needs
    │   │   ├── include
    │   │   └── lib
    │   └── protoc-3.19.4-aarch64           # axmodel parsing needs
    │       └── protoc
    ├── CMakeLists.txt
    ├── cmake                           # cmake project creation module
    │   ├── ax620e.cmake
    │   ├── ax650.cmake
    │   ├── check.cmake
    │   └── summary.cmake
    ├── examples                        # samples 
    │   ├── CMakeLists.txt
    │   ├── ax620e
    │   │   ├── ax_classification_steps.cc
    │   │   ├── ax_yolov5s_steps.cc
    │   │   └── middleware
    │   ├── ax650
    │   │   ├── ax_classification_steps.cc  # classification
    │   │   ├── ax_yolov5s_steps.cc         # yolov5s
    │   │   └── middleware
    │   ├── postprocess                     # post-processing module
    │   │   ├── detection.hpp
    │   │   ├── pose.hpp
    │   │   ├── score.hpp
    │   │   ├── topk.hpp
    │   │   └── yolo.hpp
    │   ├── preprocess                      # preprocessing module
    │   │   └── common.hpp
    │   └── utilities
    │       ├── args.hpp
    │       ├── cmdline.hpp
    │       ├── file.hpp
    │       ├── split.hpp
    │       └── timer.hpp
    └── toolchains
        └── aarch64-linux-gnu.toolchain.cmake        

--------------------
Compile example
--------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~
Environmental preparation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

- ``cmake`` version is greater than or equal to 3.13
- The supporting cross-compilation tool chain ``aarch64-none-linux-gnu-gxx`` for ``AX650A`` has been added to the environment variable, and the version information is ``gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu``

^^^^^^^^^^^^^^^^^^^^
Install cmake
^^^^^^^^^^^^^^^^^^^^

There are many ways to install ``cmake``. If it is under ``Anaconda`` **virtual environment**, you can install it through the following command:

.. code-block:: bash
  
     pip install cmake

If **non-virtual environment** and the system is ``Ubuntu``, you can pass

.. code-block:: bash

     sudo apt-get install cmake

.. _`cmake official website`: https://cmake.org/download/

If the installed version is lower, you can also download **source code compilation** ``cmake``. The specific method is as follows:

- step 1: `cmake official website`_ Download ``cmake`` and unzip it

- step 2: Enter the installation folder and execute in sequence

.. code-block:: bash
    
     ./configure
     make -j4 # 4 represents the number of computer cores and can be omitted
     sudo make install

- step 3: After ``cmake`` is installed, check the version information through the following command

.. code-block:: bash

    cmake --version

.. _`aarch64-linux-gnu-gxx`: https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Install the cross-compilation tool aarch64-linux-gnu-gxx
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There are many kinds of cross-compilers. It is recommended to use the cross-compiler produced by Linaro. You can download the relevant files from `aarch64-linux-gnu-gxx`_.
Among them, ``gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz`` is the 64bit version.

.. code-block:: bash

     # Create a new folder and move the compressed package
     mkdir -p ~/usr/local/lib
     mv gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz ~/usr/local/lib
    
     # Unzip
     cd ~/usr/local/lib
     xz -d gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz
     tar -xvf gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar
    
     # Configure environment variables
     vim ~/.bashrc
     export PATH=$PATH:~/usr/local/lib/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin
    
     #Environment takes effect
     source ~/.bashrc

~~~~~~~~~~~~~~~~~~~~
Cross compile
~~~~~~~~~~~~~~~~~~~~

**unzip files**

.. code-block:: bash

     $ unzip ax-samples.zip

**Source code compilation**

Enter the ax-samples root directory and create a cmake compilation task:

**AX650 or M76H**

.. code-block:: bash

    $ mkdir build
    $ cd build
    $ cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/aarch64-none-linux-gnu.toolchain.cmake ..
    $ make install

**AX620E**

.. code-block:: bash

    $ mkdir build
    $ cd build
    $ cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/aarch64-none-linux-gnu.toolchain.cmake -DAX_TARGET_CHIP=ax620e ..
    $ make install

After compilation is completed, the generated executable sample is stored in the path ``ax-samples/build/install/bin/``:

.. code-block:: bash

    /ax-samples/build$ tree install
    install
    └── bin
        ├── ax_classification
        └── ax_yolov5s

--------------------
Run the example
--------------------

**Run Preparation**

Log in to the ``AX650A`` or ``M76H`` or ``AX620E`` development board, and create the ``sample`` folder under the ``root`` path.

- Copy the executable sample compiled and generated in the previous chapter ``build/install/bin/`` to the ``/root/sample/`` path;
- Copy the ``mobilenetv2.axmodel`` or ``yolov5s.axmodel`` model generated by **Pulsar2** to the ``/root/sample/`` path;
- Copy the test image to the ``/root/sample/`` path.

.. code-block:: bash
  
    /root/sample # ls -l
    total 26628
    -rwxrw-r--    1 1000     1000       5722408 Nov 28 11:09 ax_classification
    -rwxrw-r--    1 1000     1000       5930800 Nov 28 11:09 ax_yolov5s
    -rw-rw-r--    1 1000     1000        140391 Nov  4 16:44 cat.jpg
    -rw-------    1 1000     root        163759 Oct 17 17:18 dog.jpg
    -rw-rw-r--    1 1000     1000       4632857 Nov 28 11:09 mobilenetv2.axmodel
    -rw-rw-r--    1 1000     1000       7873709 Nov 28 11:09 yolov5s.axmodel

If it prompts that the board space is insufficient, it can be solved by mounting the folder.

**MacOS mounting ARM development board example**

.. hint::

     Due to the limited space on the board, folder sharing is usually required during testing. In this case, the ARM development board needs to be shared with the host. Here we only take MacOS as an example.

The ``NFS`` service is required to mount the ``ARM`` development board on the development machine, and the ``MacOS`` system comes with the ``NFS`` service. You only need to create the ``/etc/exports`` folder, ` `nfsd` will automatically start and start working with `exports`.

``/etc/exports`` can be configured as follows:

.. code-block:: shell

     /path/your/sharing/directory -alldirs -maproot=root:wheel -rw -network xxx.xxx.xxx.xxx -mask 255.255.255.0

Parameter explanation

.. list-table::
    :widths: 15 40
    :header-rows: 1

    * - parameter name
      - meaning
    * - alldirs
      - Share all files in the ``/Users`` directory, you can omit it if you only want to share one folder
    * - network
      - Mount the ARM development board IP address, which can be a network segment address
    * - mask
      - Subnet mask, usually 255.255.255.0
    * - maproot
      - Mapping rules, when ``maproot=root:wheel`` means mapping the ``root`` user of the ``ARM`` board to the ``root`` user on the development machine, ``ARM``'s The root group maps to the wheel (gid=0) group on MacOS.
        If defaulted, ``nfsroot`` link failure error may occur.
    * - rw
      - Read and write operations, enabled by default

Modifying ``/etc/exports`` requires restarting the ``nfsd`` service

.. code-block:: bash

    sudo nfsd restart

If the configuration is successful, you can use

.. code-block:: bash

    sudo showmount -e
 
Use the command to view the mounting information, for example, output ``/Users/skylake/board_nfs 10.168.21.xx``. After configuring the development machine, you need to execute the ``mount`` command on the ``ARM`` side.

.. code-block:: bash

    mount -t nfs -o nolock,tcp macos_ip:/your/shared/directory /mnt/directory

If permission issues occur, you need to check whether the ``maproot`` parameters are correct.

.. hint::

    The ``network`` parameter can be configured in the form of a network segment, such as: ``10.168.21.0``. If ``Permission denied`` appears when mounting a single IP, you can try mounting within the network segment.

**Classification Model**

For classification models, you can run them on the board by executing the ``ax_classification`` program.

.. code-block:: bash

    /root/sample # ./ax_classification -m mobilenetv2.axmodel -i cat.jpg --repeat 100
    --------------------------------------
    model file : mobilenetv2.axmodel
    image file : cat.jpg
    img_h, img_w : 224 224
    --------------------------------------
    Engine creating handle is done.
    Engine creating context is done.
    Engine get io info is done.
    Engine alloc io is done.
    Engine push input is done.
    --------------------------------------
    topk cost time:0.10 ms
    9.7735, 285
    9.2452, 283
    8.9811, 281
    8.7169, 282
    7.5283, 463
    --------------------------------------
    Repeat 100 times, avg time 0.78 ms, max_time 0.78 ms, min_time 0.77 ms
    --------------------------------------

**检测模型**

.. code-block:: bash

    /root/sample # ./ax_yolov5s -m yolov5s.axmodel -i dog.jpg -r 100
    --------------------------------------
    model file : yolov5s.axmodel
    image file : dog.jpg
    img_h, img_w : 640 640
    --------------------------------------
    Engine creating handle is done.
    Engine creating context is done.
    Engine get io info is done.
    Engine alloc io is done.
    Engine push input is done.
    --------------------------------------
    post process cost time:1.66 ms
    --------------------------------------
    Repeat 100 times, avg time 7.67 ms, max_time 7.68 ms, min_time 7.67 ms
    --------------------------------------
    detection num: 4
    16:  93%, [ 182,  291,  411,  721], dog
    2:  72%, [ 626,  101,  919,  231], car
    1:  60%, [ 212,  158,  760,  558], bicycle
    7:  46%, [ 628,  101,  916,  232], truck
    --------------------------------------
